#!/usr/bin/env python
"""
Calculator entrypoint
"""

import functools
import operator
import sys

from PyQt5 import QtGui, QtWidgets

import supertool.buttons


class MainApplication(QtWidgets.QMainWindow):
    """GUI calculator.

    Fields:
        current_display: what is shown to user now
        equal_pressed: if last passed operation is equal
        index: stands for index of numbers to fill now
        numbers: list of strings
        operation: current math operation
        OPERATIONS: dict of possible operations

    """
    OPERATIONS = {'+': operator.add,
                  '-': operator.sub,
                  '*': operator.mul,
                  '/': operator.truediv,
                  '^': operator.pow}

    numbers = ['', '']
    index = 0
    equal_pressed = 0
    operation = ''
    current_display = ''

    def make_numbers_buttons(self):
        """Creates 0-9 buttons.

        :return: None
        """
        for i in range(10):
            if i == 0:
                col, row = 1, 3
            else:
                col = (i-1) % 3
                row = (i-1) // 3

            button = QtWidgets.QPushButton(self.ui.gridWidget)
            sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
            sizePolicy.setHorizontalStretch(0)
            sizePolicy.setVerticalStretch(0)
            sizePolicy.setHeightForWidth(button.sizePolicy().hasHeightForWidth())
            button.setSizePolicy(sizePolicy)
            font = QtGui.QFont()
            font.setPointSize(30)
            font.setBold(False)
            button.setFont(font)
            button.setObjectName("button_{}".format(i))
            self.ui.gridLayout.addWidget(button, row, col, 1, 1)
            button.setText(str(i))
            button.clicked.connect(functools.partial(self.number_pressed, i))

    def __init__(self):
        super(MainApplication, self).__init__()

        self.ui = supertool.buttons.Ui_MainWindow()
        self.ui.setupUi(self)

        self.make_numbers_buttons()

        # math operations buttons
        self.ui.button_add.clicked.connect(functools.partial(self.operation_pressed, '+'))
        self.ui.button_substract.clicked.connect(functools.partial(self.operation_pressed, '-'))
        self.ui.button_multiply.clicked.connect(functools.partial(self.operation_pressed, '*'))
        self.ui.button_divide.clicked.connect(functools.partial(self.operation_pressed, '/'))
        self.ui.button_power.clicked.connect(functools.partial(self.operation_pressed, '^'))

        # 'C' and '=' buttons
        self.ui.button_result.clicked.connect(self.operation_equal_pressed)
        self.ui.button_clear.clicked.connect(self.clear_and_show)

    def clear(self):
        """Set some parameters to initial values.

        :return: None
        """
        self.current_display = ''
        self.numbers = ['', '']
        self.operation = ''
        self.index = 0
        self.equal_pressed = 0

    def clear_and_show(self):
        """Calls clear() and displays result.

        :return: None
        """
        self.clear()
        self.ui.lcd.setText(self.current_display)

    def operation_equal_pressed(self):
        """Processes case if '=' pressed,

        :return: None
        """
        if self.numbers[1]:
            self.calc_result()
        elif self.operation:
            self.current_display = self.current_display[:-1]
            self.index = 0
            self.operation = ''
        self.equal_pressed = 1
        self.ui.lcd.setText(self.current_display)

    def operation_pressed(self, operation):
        """Processes case if math operation pressed.

        :param operation: math operation written on button.
        :return: None
        """
        if self.numbers[0]:
            if self.numbers[1]:
                self.calc_result()
                if self.numbers[0]:
                    self.current_display += operation
                    self.operation = operation
            else:
                if self.operation:
                    self.current_display = self.current_display[:-1] + operation
                else:
                    self.current_display += operation
                    self.index = 1
                self.operation = operation
                self.equal_pressed = 0

            self.ui.lcd.setText(str(self.current_display))

    def number_pressed(self, number):
        """Processes case if number pressed.

        :param number: number written on button
        :return: None
        """
        if self.equal_pressed:
            self.index = 0
            self.numbers = ['', '']
            self.current_display = ''
            self.equal_pressed = 0
        self.numbers[self.index] += str(number)
        self.current_display += str(number)
        self.ui.lcd.setText(str(self.current_display))

    def pretty_display(self, to_display, digits=2):
        """If to_display is integer, returns integer, else rounds it to digits.

        :param to_display: number to be displayed
        :param digits: parameter for round
        :return: str -- int or rounded float
        """
        if to_display.is_integer():
            return str(int(to_display))
        else:
            return str(round(to_display, digits))

    def calc_result(self):
        """Processes when it is needed to calculate result of math operation.

        :return: None
        """
        try:
            result = self.OPERATIONS[self.operation](float(self.numbers[0]), float(self.numbers[1]))
            self.current_display = self.pretty_display(result)
            self.numbers = [str(result), '']
            self.operation = ''
            return True

        except ZeroDivisionError as e:
            self.clear()
            self.current_display = str(e)
            self.equal_pressed = 1
            return False

        except OverflowError as e:
            self.clear()
            self.current_display = e.args[1]
            self.equal_pressed = 1
            return False


app = QtWidgets.QApplication(sys.argv)
window = MainApplication()
window.show()

sys.exit(app.exec_())
