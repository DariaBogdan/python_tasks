#!/usr/bin/env python
"""
Supertool entrypoint
"""

import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidgetItem

import supertool.weather_gui
import supertool.weather
import supertool.similar


class MainApplication(QtWidgets.QMainWindow):
    """Application has two tabs:
    weather -- shows weather by entered address;
    similar -- shows similar files in entered directory.

    """
    def __init__(self):
        super(MainApplication, self).__init__()
        self.ui = supertool.weather_gui.Ui_MainWindow()
        self.ui.setupUi(self)

        # set some widgets invisible
        self.ui.tableWidgetCurrentWeather.setVisible(False)
        self.ui.tableWidgetForecastWeather.setVisible(False)
        self.ui.labelForecastWeather.setVisible(False)
        self.ui.textBrowser.setVisible(False)

        # connects for similar
        self.ui.similarButton.clicked.connect(self.show_similar_files)
        self.ui.lineEditSimilar.selectionChanged.connect(self.ui.lineEditSimilar.clear)
        self.ui.lineEditSimilar.returnPressed.connect(self.ui.similarButton.click)

        # connects for weather
        self.ui.weatherButton.clicked.connect(self.show_weather)
        self.ui.textEditAddress.selectionChanged.connect(self.ui.textEditAddress.clear)
        self.ui.textEditAddress.returnPressed.connect(self.ui.weatherButton.click)
        # needs for auto rewriting previous address with typing new address
        self.flag = False
        self.ui.textEditAddress.textEdited.connect(self.change_flag)

    def show_similar_files(self):
        """Searches similar files in directory, entered in lineEdit.
        Writes result to textBrowser. If there is no such directory or
        if no similar files founded, writes that no simiral files founded.

        :return: None
        """

        self.ui.textBrowser.setText('')  # remove previous search result
        directory = self.ui.lineEditSimilar.text()  # get entered directory
        result = supertool.similar.work(directory, print_flag=False)  # find similar files in directory
        self.ui.textBrowser.setVisible(True)
        for similar_set in result:
            if len(similar_set) > 1:  # i.e. if similar files found
                self.ui.textBrowser.setText(
                    '{}These {} files are the same:\n{}\n\n'.format(
                        self.ui.textBrowser.toPlainText(),
                        len(similar_set),
                        '\n'.join(similar_set)
                    )
                )
        if self.ui.textBrowser.toPlainText() == '':  # message if nothing similar found
            self.ui.textBrowser.setText(
                f'There are no same files in the entered directory {directory}.'
            )

    def change_flag(self):
        """If user types something after weather has been calculated
        once, previous query in tetxEdit would be removed and all newly
        typed characters will be written to textEdit. I.e. rewrites
        textEdit with typed character.

        :return: None
        """
        if not self.flag:
            self.flag = True
            self.ui.textEditAddress.setText(self.ui.textEditAddress.text()[-1])

    def show_weather(self):
        """Shows current weather and weather forecast corresponding
        to passed address. If nothing found by entered address,
        notification message would be shown.

        :return: None
        """
        address = self.ui.textEditAddress.text()  # get entered address
        try:
            coordinates = supertool.weather.get_coordinates_by_address(address)  # this row may raise LookupError

            msg = coordinates['place']  # this place was found by passed address

            # turn on widgets for current weather
            self.ui.tableWidgetCurrentWeather.setVisible(True)
            self.ui.labelCurrentWeather.setVisible(True)
            # show what place was found
            self.ui.labelCurrentWeather.setText(
                f'The following place was found on the entered request:\n{msg}\n\n'
                f'Current weather in {msg}:')

            # get current weather at this place
            current_weather = supertool.weather.get_current_weather_by_coordinates(
                lat=coordinates['lat'],
                lon=coordinates['lon']
            )
            # fill table with current weather
            for col_idx in range(current_weather.shape[1]):
                self.ui.tableWidgetCurrentWeather.setItem(
                    0,
                    col_idx,
                    QTableWidgetItem(str(current_weather.iloc[0, col_idx]))
                )

            # turn on widgets for future weather
            self.ui.tableWidgetForecastWeather.setVisible(True)
            self.ui.labelForecastWeather.setVisible(True)
            self.ui.labelForecastWeather.setText(f'Forecast weather in {msg}:')

            # get forecast weather at this place
            forecast_weather = supertool.weather.get_weather_forecast_by_coordinates(
                lat=coordinates['lat'],
                lon=coordinates['lon']
            )
            # fill table with future weather
            for row_idx, row_name in enumerate(forecast_weather.index):
                self.ui.tableWidgetForecastWeather.setItem(row_idx, 0, QTableWidgetItem(row_name))
                for col_idx, col_name in enumerate(forecast_weather.columns.tolist()):
                    self.ui.tableWidgetForecastWeather.setItem(
                        row_idx,
                        col_idx + 1,
                        QTableWidgetItem(str(forecast_weather.iloc[row_idx, col_idx]))
                    )

        except LookupError as e:
            # turn off several widgets
            self.ui.tableWidgetCurrentWeather.setVisible(False)
            self.ui.tableWidgetForecastWeather.setVisible(False)
            self.ui.labelForecastWeather.setVisible(False)
            # print message
            self.ui.labelCurrentWeather.setText(str(e))
        finally:
            self.flag = False  # for auto filling address when user types


app = QtWidgets.QApplication(sys.argv)
window = MainApplication()
window.show()

sys.exit(app.exec_())
